// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
interface CallData {
  id: string
  callerId: string
  receiverId: string
  type: "voice" | "video"
  status: "calling" | "ringing" | "accepted" | "declined" | "ended"
  timestamp: number
  callerInfo?: {
    login: string
    name: string
    avatar: string
  }
}

class CallService {
  private activeCall: CallData | null = null
  private callListeners: ((call: CallData | null) => void)[] = []
  private incomingCallListeners: ((call: CallData | null) => void)[] = []

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
  onCallUpdate(callback: (call: CallData | null) => void) {
    this.callListeners.push(callback)
    return () => {
      this.callListeners = this.callListeners.filter((cb) => cb !== callback)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
  onIncomingCall(callback: (call: CallData | null) => void) {
    this.incomingCallListeners.push(callback)
    return () => {
      this.incomingCallListeners = this.incomingCallListeners.filter((cb) => cb !== callback)
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  private notifyListeners() {
    this.callListeners.forEach((callback) => callback(this.activeCall))
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–∞—Ö
  private notifyIncomingCall(call: CallData | null) {
    this.incomingCallListeners.forEach((callback) => callback(call))
  }

  // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
  async initiateCall(callerId: string, receiverId: string, type: "voice" | "video", callerInfo?: any): Promise<string> {
    const callId = `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    this.activeCall = {
      id: callId,
      callerId,
      receiverId,
      type,
      status: "calling",
      timestamp: Date.now(),
      callerInfo,
    }

    console.log("üìû Initiating call:", this.activeCall)
    this.notifyListeners()

    // –ß–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ ringing –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    setTimeout(() => {
      if (this.activeCall?.id === callId) {
        this.activeCall.status = "ringing"
        console.log("üìû Call status changed to ringing:", callId)
        this.notifyListeners()

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
        this.notifyIncomingCall(this.activeCall)
      }
    }, 1000)

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç
    setTimeout(() => {
      if (this.activeCall?.id === callId && this.activeCall.status === "ringing") {
        console.log("üìû Call timeout, ending call:", callId)
        this.endCall(callId)
      }
    }, 30000)

    return callId
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞
  acceptCall(callId: string) {
    if (this.activeCall?.id === callId) {
      this.activeCall.status = "accepted"
      console.log("‚úÖ Call accepted:", callId)
      this.notifyListeners()
      this.notifyIncomingCall(null) // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ
    }
  }

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  declineCall(callId: string) {
    if (this.activeCall?.id === callId) {
      this.activeCall.status = "declined"
      console.log("‚ùå Call declined:", callId)
      this.notifyListeners()
      this.notifyIncomingCall(null) // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ

      // –£–±–∏—Ä–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        this.activeCall = null
        this.notifyListeners()
      }, 1000)
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  endCall(callId: string) {
    if (this.activeCall?.id === callId) {
      this.activeCall.status = "ended"
      console.log("üìû Call ended:", callId)
      this.notifyListeners()
      this.notifyIncomingCall(null) // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥—è—â–µ–º –∑–≤–æ–Ω–∫–µ

      // –£–±–∏—Ä–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        this.activeCall = null
        this.notifyListeners()
      }, 1000)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  getCurrentCall(): CallData | null {
    return this.activeCall
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  hasActiveCallForUser(userId: string): boolean {
    return this.activeCall !== null && (this.activeCall.callerId === userId || this.activeCall.receiverId === userId)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getIncomingCallForUser(userId: string): CallData | null {
    if (this.activeCall && this.activeCall.receiverId === userId && this.activeCall.status === "ringing") {
      return this.activeCall
    }
    return null
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  simulateIncomingCall(receiverId: string, type: "voice" | "video", callerInfo: any) {
    const callId = `sim_call_${Date.now()}`

    const incomingCall: CallData = {
      id: callId,
      callerId: "test_caller",
      receiverId,
      type,
      status: "ringing",
      timestamp: Date.now(),
      callerInfo,
    }

    this.activeCall = incomingCall
    console.log("üìû Simulating incoming call:", incomingCall)
    this.notifyIncomingCall(incomingCall)
    this.notifyListeners()

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (this.activeCall?.id === callId) {
        this.endCall(callId)
      }
    }, 30000)

    return callId
  }
}

export const localCallService = new CallService()
