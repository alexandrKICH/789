// –°–∏—Å—Ç–µ–º–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
interface Notification {
  id: string
  type: "friend_request" | "friend_accepted" | "message" | "call" | "group_invite"
  fromUserId: string
  toUserId: string
  data: any
  timestamp: number
}

class NotificationService {
  private listeners: Map<string, ((notification: Notification) => void)[]> = new Map()
  private activeNotifications: Map<string, Notification> = new Map()

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  subscribe(userId: string, callback: (notification: Notification) => void) {
    if (!this.listeners.has(userId)) {
      this.listeners.set(userId, [])
    }
    this.listeners.get(userId)!.push(callback)

    console.log("üîî User subscribed to notifications:", userId)

    return () => {
      const userListeners = this.listeners.get(userId)
      if (userListeners) {
        const index = userListeners.indexOf(callback)
        if (index > -1) {
          userListeners.splice(index, 1)
        }
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private notify(userId: string, notification: Notification) {
    const userListeners = this.listeners.get(userId)
    if (userListeners && userListeners.length > 0) {
      console.log("üîî Sending notification to user:", userId, notification.type)
      userListeners.forEach((callback) => callback(notification))
    } else {
      console.log("üîî No active listeners for user:", userId, "- storing notification")
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∂–µ
      this.activeNotifications.set(`${userId}_${notification.id}`, notification)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã
  sendFriendRequest(fromUserId: string, toUserId: string, fromUserInfo: any) {
    const notificationId = `friend_req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    const notification: Notification = {
      id: notificationId,
      type: "friend_request",
      fromUserId,
      toUserId,
      data: {
        fromUser: fromUserInfo,
        message: `${fromUserInfo.name} (@${fromUserInfo.login}) —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è`,
      },
      timestamp: Date.now(),
    }

    console.log("üë• Sending friend request notification:", fromUserInfo.login, "->", toUserId)

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
      this.notify(toUserId, notification)
    }, 100)

    return notificationId
  }

  // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã
  acceptFriendRequest(requestId: string, fromUserId: string, toUserId: string, toUserInfo: any) {
    const notification: Notification = {
      id: `friend_acc_${Date.now()}`,
      type: "friend_accepted",
      fromUserId: toUserId,
      toUserId: fromUserId,
      data: {
        fromUser: toUserInfo,
        message: `${toUserInfo.name} (@${toUserInfo.login}) –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã`,
      },
      timestamp: Date.now(),
    }

    console.log("‚úÖ Friend request accepted:", toUserInfo.login, "->", fromUserId)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–∞
    setTimeout(() => {
      this.notify(fromUserId, notification)
    }, 100)

    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    this.activeNotifications.delete(`${toUserId}_${requestId}`)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  getUnreadNotifications(userId: string): Notification[] {
    const notifications: Notification[] = []

    for (const [key, notification] of this.activeNotifications.entries()) {
      if (key.startsWith(`${userId}_`)) {
        notifications.push(notification)
      }
    }

    return notifications.sort((a, b) => b.timestamp - a.timestamp)
  }

  // –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  markAsRead(userId: string, notificationId: string) {
    this.activeNotifications.delete(`${userId}_${notificationId}`)
  }
}

export const notificationService = new NotificationService()
